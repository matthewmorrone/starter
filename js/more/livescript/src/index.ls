require! {
  './lexer'
  './parser': {parser}
  './ast'
}

# Override Jison's default lexer, so that it can accept
# the generic stream of tokens our lexer produces.
parser <<<
  yy: ast
  lexer:
    lex: -> [tag, @yytext, @yylineno] = @tokens[++@pos] or ['']; tag
    set-input: -> @pos = -1; @tokens = it
    upcoming-input: -> ''

exports <<<
  VERSION: '1.3.1'

  # Compiles a string of LiveScript code to JavaScript.
  compile: (code, options = {}) ->
    options.header ?= true
    try
      output = (parser.parse lexer.lex code).compile-root options
      output = "// Generated by LiveScript #{exports.VERSION}\n#{output}" if options.header
      output
    catch
      e.message += "\nat #that" if options.filename
      throw e

  # Parses a string or tokens of LiveScript code,
  # returning the [AST](http://en.wikipedia.org/wiki/Abstract_syntax_tree).
  ast: -> parser.parse if typeof it is 'string' then lexer.lex it else it

  # Tokenizes a string of LiveScript code, returning the array of tokens.
  tokens: lexer.lex

  # Same as `tokens`, except that this skips rewriting.
  lex: -> lexer.lex it, {+raw}

  # Runs LiveScript code directly.
  run: (code, options) -> do Function exports.compile code, {...options, +bare}

exports.tokens.rewrite = lexer.rewrite

# Export AST constructors.
exports.ast <<<< parser.yy

if require.extensions
  (require './node') exports
else
  # Attach `require` for debugging.
  exports <<< {require}
